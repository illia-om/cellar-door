import * as vars from './vars.css';

const colors = {
	...vars.colors,
	currentColor: 'currentColor',
	transparent: 'transparent',
};

const borderColors = {
	...colors,
	dividerInert: colors.coreBorder,
	dividerHighlight: colors.blueMedium,
};

const borderRadius = {
	none: '0px',
	...vars.radii,
};

export const colorProperties = {
	background: colors,
	color: colors,
	fill: colors,
	borderColor: borderColors,
	borderTopColor: borderColors,
	borderRightColor: borderColors,
	borderBottomColor: borderColors,
	borderLeftColor: borderColors,
} as const;

const borders = {
	none: '0',
	largeDivider: `${vars.borderWidths.large} solid ${borderColors.dividerInert}`,
	mediumDivider: `${vars.borderWidths.medium} solid ${borderColors.dividerInert}`,
	smallDivider: `${vars.borderWidths.small} solid ${borderColors.dividerInert}`,
};

const margins = {
	...vars.space,
	...vars.negativeSpace,
} as const;

export const unresponsiveProperties = {
	overflow: ['hidden', 'scroll', 'visible', 'auto'],
	userSelect: ['none'],
	outline: ['none'],
	opacity: [0],
	zIndex: vars.zIndices,
	boxShadow: {
		...vars.shadows,
		selected: `inset 0 0 0 ${vars.borderWidths.large} ${colors.napoBlue}`,
	},
	cursor: ['default', 'pointer', 'not-allowed'],
	pointerEvents: ['none'],
	minWidth: {
		0: '0%',
	},
} as const;

export type UnresponsiveProperties = keyof typeof unresponsiveProperties;

export const responsiveProperties = {
	display: {
		none: 'none',
		block: 'block',
		contents: 'contents',
		inline: 'inline',
		inlineBlock: 'inline-block',
		inlineFlex: 'inline-flex',
		flex: 'flex',
		listItem: 'list-item',
	},
	position: ['relative', 'sticky', 'absolute', 'fixed'],
	width: {
		...vars.sizes,
		'1': 'calc(100% * (1 / 12))',
		'2': 'calc(100% * (2 / 12))',
		'3': 'calc(100% * (3 / 12))',
		'4': 'calc(100% * (4 / 12))',
		'5': 'calc(100% * (5 / 12))',
		'6': 'calc(100% * (6 / 12))',
		'7': 'calc(100% * (7 / 12))',
		'8': 'calc(100% * (8 / 12))',
		'9': 'calc(100% * (9 / 12))',
		'10': 'calc(100% * (10 / 12))',
		'11': 'calc(100% * (11 / 12))',
		'12': 'calc(100% * (12 / 12))',
		full: '100%',
		auto: 'auto',
		fitContent: 'fit-content',
	},
	maxWidth: {
		...vars.sizes,
		form: '600px',
		readingSmall: '800px',
		reading: '850px',
		readingLarge: '1100px',
	},
	height: vars.sizes,
	borderRadius,
	borderTopLeftRadius: borderRadius,
	borderTopRightRadius: borderRadius,
	borderBottomRightRadius: borderRadius,
	borderBottomLeftRadius: borderRadius,
	paddingTop: vars.space,
	paddingRight: vars.space,
	paddingBottom: vars.space,
	paddingLeft: vars.space,
	margin: margins,
	marginTop: margins,
	marginBottom: margins,
	marginLeft: margins,
	marginRight: margins,
	top: vars.space,
	right: vars.space,
	bottom: vars.space,
	left: vars.space,
	gap: vars.space,
	columnGap: vars.space,
	rowGap: vars.space,
	border: borders,
	borderTop: borders,
	borderBlock: borders,
	borderInline: borders,
	borderRight: borders,
	borderBottom: borders,
	borderLeft: borders,
	borderWidth: vars.borderWidths,
	borderTopWidth: vars.borderWidths,
	borderRightWidth: vars.borderWidths,
	borderBottomWidth: vars.borderWidths,
	borderLefWidth: vars.borderWidths,
	gridColumn: {
		'1': 'span 1',
		'2': 'span 2',
		'3': 'span 3',
		'4': 'span 4',
		'5': 'span 5',
		'6': 'span 6',
		'7': 'span 7',
		'8': 'span 8',
		'9': 'span 9',
		'10': 'span 10',
		'11': 'span 11',
		'12': 'span 12',
		'1/2': '4 / span 6',
		'center-half': '4 / span 6',
		full: '1 / -1',
		half: 'span 6',
		third: 'span 4',
		quarter: 'span 3',
	},
	gridColumnStart: {
		'1': '1',
		'2': '2',
		'3': '3',
		'4': '4',
		'5': '5',
		'6': '6',
		'7': '7',
		'8': '8',
		'9': '9',
		'10': '10',
		'11': '11',
		'12': '12',
	},
	gridColumnEnd: {
		'1': '1',
		'2': '2',
		'3': '3',
		'4': '4',
		'5': '5',
		'6': '6',
		'7': '7',
		'8': '8',
		'9': '9',
		'10': '10',
		'11': '11',
		'12': '12',
		'13': '13',
	},
	gridRow: {
		'1': '1',
		'2': '2',
		'3': '3',
		'4': '4',
		'5': '5',
	},
	order: {
		'0': '0',
		'1': '1',
		'2': '2',
		'3': '3',
		'4': '4',
		'5': '5',
		'6': '6',
	},
	flexDirection: {
		row: 'row',
		rowReverse: 'row-reverse',
		column: 'column',
		columnReverse: 'column-reverse',
	},
	flexWrap: {
		wrap: 'wrap',
		nowrap: 'nowrap',
	},
	placeContent: {
		baseline: 'baseline',
		start: 'start',
		center: 'center',
		end: 'end',
		stretch: 'stretch',
	},
	alignContent: {
		baseline: 'baseline',
		start: 'start',
		center: 'center',
		end: 'end',
		stretch: 'stretch',
	},
	alignItems: {
		baseline: 'baseline',
		start: 'start',
		flexStart: 'flex-start',
		center: 'center',
		flexEnd: 'flex-end',
		end: 'end',
		between: 'space-between',
		around: 'space-around',
		evenly: 'space-evenly',
	},
	alignSelf: {
		baseline: 'baseline',
		start: 'start',
		flexStart: 'flex-start',
		center: 'center',
		flexEnd: 'flex-end',
		end: 'end',
		stretch: 'stretch',
	},
	justifyContent: {
		baseline: 'baseline',
		start: 'start',
		flexStart: 'flex-start',
		center: 'center',
		flexEnd: 'flex-end',
		end: 'end',
		between: 'space-between',
		around: 'space-around',
		evenly: 'space-evenly',
		stretch: 'stretch',
	},
	justifyItems: {
		baseline: 'baseline',
		start: 'start',
		flexStart: 'flex-start',
		center: 'center',
		flexEnd: 'flex-end',
		end: 'end',
		between: 'space-between',
		around: 'space-around',
		evenly: 'space-evenly',
	},
	justifySelf: {
		baseline: 'baseline',
		start: 'flex-start',
		center: 'center',
		end: 'end',
		stretch: 'stretch',
	},
	flexShrink: [0],
	flexGrow: [0, 1],
	flexBasis: {
		auto: 'auto',
		'0': '0%',
		'1/2': '50%',
		'1/3': '33.33%',
		'1/4': '25%',
	},
	flex: {
		'1': '1 0 0%',
	},
	textAlign: ['start', 'center', 'end', 'justify'],
	whiteSpace: ['pre', 'pre-line'],
	wordBreak: ['break-word', 'break-all'],
} as const;

export type ResponsiveProperties = keyof typeof responsiveProperties;

export type ColorProperties = keyof typeof responsiveProperties;
